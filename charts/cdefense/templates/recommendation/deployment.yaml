---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: recommendation
  namespace: {{ .Release.Namespace | default "default"}}
spec:
  selector:
    matchLabels:
      app: recommendation
  replicas: {{ .Values.recommendation.replicas }}
  template:
    metadata:
      labels:
        app: recommendation
      annotations:
        diun.enable: "true"
    spec:
      {{- if .Values.recommendation.nodeSelector }}
      nodeSelector:
        label: {{ .Values.recommendation.nodeSelector }}
      {{- end }}
      {{- if .Values.recommendation.tolerations }}
      tolerations:
{{ toYaml .Values.recommendation.tolerations | indent 8 }}
      {{- end }}
      imagePullSecrets:
      - name: regcred
      containers:
      - name: recommendation
        image: {{ .Values.recommendation.image }}:{{ .Values.version }}
        imagePullPolicy: Always
        env:
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
                name: cdefense-config
                key: DB_ADDR
        - name: POSTGRES_NAME
          valueFrom:
            configMapKeyRef:
                name: cdefense-config
                key: DB_VENDOR
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
                name: cdefense-config
                key: DB_PORT
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
                name: cdefense-config
                key: DB_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: DB_PASSWORD
              name: cdefense-secrets
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
                name: cdefense-config
                key: DB_NAME
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              key: JWT_SECRET
              name: recommendation-service-secrets
        ports:
        - containerPort: 3000
  #      resources:
  #        requests:
  #          memory: "0.5G"
  #          cpu: "250m"
  #        limits:
  #          memory: "0.5G"
      initContainers:
        - name: check-db
          image: postgres:14
          imagePullPolicy: IfNotPresent
          command: 
            - sh
            - -c
            - until pg_isready -h db -p 5432; do echo waiting for database; sleep 5; done;
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
