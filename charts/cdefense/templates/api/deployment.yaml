---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: {{ .Release.Namespace | default "default"}}
spec:
  selector:
    matchLabels:
      app: api
  replicas: 1
  template:
    metadata:
      labels:
        app: api
      annotations:
        diun.enable: "true"
    spec:
      {{- if .Values.api.nodeSelector }}
      nodeSelector:
        label: {{ .Values.api.nodeSelector }}
      {{- end }}
      {{- if .Values.api.tolerations }}
      tolerations:
{{ toYaml .Values.api.tolerations | indent 8 }}
      {{- end }}
      imagePullSecrets:
      - name: regcred
      initContainers:
      - name: check-db
        image: postgres:14
        imagePullPolicy: IfNotPresent
        command: 
          - sh
          - -c
          - until pg_isready -h db -p 5432; do echo waiting for database; sleep 5; done;
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      containers:
      - name: api
        image: {{ .Values.api.image }}:{{ .Values.version }}
        imagePullPolicy: Always
        envFrom:
          - configMapRef:
              name: cdefense-config
          - configMapRef:
              name: scan-server-config
        env:
        - name: DAST_SCAN_DOCKER_IMAGE
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: DAST_SCAN_DOCKER_IMAGE
        - name: API_SCAN_DOCKER_IMAGE
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: API_SCAN_DOCKER_IMAGE
        - name: CUSTOM_ALLOWED_ORIGIN
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: CUSTOM_ALLOWED_ORIGIN
        - name: FULL_SCAN_DOCKER_IMAGE
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: FULL_SCAN_DOCKER_IMAGE
        - name: KUBERNETES_NODESELECTOR_KEY
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: KUBERNETES_NODESELECTOR_KEY
        - name: KUBERNETES_NODESELECTOR_VALUE
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: KUBERNETES_NODESELECTOR_VALUE
        - name: KAFKA_SERVERS
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: KAFKA_SERVERS
        - name: MICRONAUT_SECURITY_ENABLED
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: MICRONAUT_SECURITY_ENABLED
        - name: MICRONAUT_SECURITY_TOKEN_JWT_BEARER_ENABLED
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: MICRONAUT_SECURITY_TOKEN_JWT_BEARER_ENABLED
        - name: CLOUDDEFENSE_WEBCONSOLE_HOST_URL
          valueFrom:
            configMapKeyRef:
              name: cdefense-config
              key: CLOUDDEFENSE_WEBCONSOLE_HOST_URL
        - name: CLOUDDEFENSE_WEBCONSOLE_TERRAFORM_SCAN_URL
          valueFrom:
            configMapKeyRef:
              name: cdefense-config
              key: CLOUDDEFENSE_WEBCONSOLE_TERRAFORM_SCAN_URL
        - name: CLOUDDEFENSE_WEBCONSOLE_KUBERNETES_SCAN_URL
          valueFrom:
            configMapKeyRef:
              name: cdefense-config
              key: CLOUDDEFENSE_WEBCONSOLE_KUBERNETES_SCAN_URL
        - name: CLOUDDEFENSE_WEBCONSOLE_SERVERLESS_SCAN_URL
          valueFrom:
            configMapKeyRef:
              name: cdefense-config
              key: CLOUDDEFENSE_WEBCONSOLE_SERVERLESS_SCAN_URL
        - name: MICRONAUT_SECURITY_TOKEN_JWT_SIGNATURES_JWKS_KEYCLOAK_URL
          valueFrom:
            configMapKeyRef:
              name: cdefense-config
              key: CLOUDDEFENSE_JWK_KEYCLOAK_URL
        - name: KEYCLOAK_ENABLED
          value: "true"
        - name: API_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: API_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: DB_CONNECTION_STRING
          valueFrom:
            configMapKeyRef:
              name: cdefense-config
              key: DB_CONNECTION_STRING
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
                name: cdefense-config
                key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: DB_PASSWORD
              name: cdefense-secrets
        - name: CLOUDDEFENSE_HEROKUAPP_GRAPHQL_URL
          valueFrom:
            configMapKeyRef:
              name: cdefense-config
              key: CLOUDDEFENSE_GRAPHQL_URL
        - name: HASURA_GRAPHQL_ADMIN_SECRET
          valueFrom:
            secretKeyRef:
              key: HASURA_GRAPHQL_ADMIN_SECRET 
              name: graphql-secrets
        - name: AWS_S3_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AWS_S3_ACCESS_KEY
              name: scan-server-secrets
              optional: true
        - name: AWS_S3_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AWS_S3_SECRET_KEY
              name: scan-server-secrets
              optional: true
        - name: AWS_SCAN_S3_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AWS_SCAN_S3_ACCESS_KEY
              name: scan-server-secrets
              optional: true
        - name: AWS_SCAN_S3_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AWS_SCAN_S3_SECRET_KEY
              name: scan-server-secrets
              optional: true
        - name: AWS_SCAN_S3_REGION
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: AWS_SCAN_S3_REGION
              optional: true
        - name: AWS_SCAN_S3_BUCKET
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: AWS_SCAN_S3_BUCKET
              optional: true
        - name: GITHUB_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: scan-server-secrets
              key: GITHUB_CLIENT_ID
              optional: true
        - name: GITHUB_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: scan-server-secrets
              key: GITHUB_CLIENT_SECRET
              optional: true
        - name: GITLAB_APPLICATION_ID
          valueFrom:
            secretKeyRef:
              name: scan-server-secrets
              key: GITLAB_APPLICATION_ID
              optional: true
        - name: GITLAB_APPLICATION_SECRET
          valueFrom:
            secretKeyRef:
              name: scan-server-secrets
              key: GITLAB_APPLICATION_SECRET
              optional: true
        - name: BITBUCKET_APPLICATION_ID
          valueFrom:
            secretKeyRef:
              name: scan-server-secrets
              key: BITBUCKET_APPLICATION_ID
              optional: true
        - name: BITBUCKET_APPLICATION_SECRET
          valueFrom:
            secretKeyRef:
              name: scan-server-secrets
              key: BITBUCKET_APPLICATION_SECRET
              optional: true
        - name: MAX_SCAN_PER_USER
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: MAX_SCAN_PER_USER
        - name: ONLINE_SCAN_POOL_SIZE
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: ONLINE_SCAN_POOL_SIZE
        - name: CDEFENSE_BACKEND_URL
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: CDEFENSE_BACKEND_URL
        - name: K8_RESOURCES_REQUEST_MEMORY
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: K8_RESOURCES_REQUEST_MEMORY
        - name: K8_RESOURCES_REQUEST_CPU
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: K8_RESOURCES_REQUEST_CPU
        - name: K8_RESOURCES_LIMIT_MEMORY
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: K8_RESOURCES_LIMIT_MEMORY
        - name: AWS_S3_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: AWS_S3_ENDPOINT
        - name: DATAJOB_WEBHOOK_URL
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: DATAJOB_WEBHOOK_URL
        - name: PROFILER_WEBHOOK_URL
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: PROFILER_WEBHOOK_URL
        - name: CLOUDDEFENSE_CRYPT_BASE_SECRET
          valueFrom:
            secretKeyRef:
              key: CLOUDDEFENSE_CRYPT_BASE_SECRET
              name: scan-server-secrets
        - name: CLOUDDEFENSE_SENDGRID_API_KEY
          valueFrom:
            secretKeyRef:
              key: SENDGRID_KEY
              name: authservice-secrets
        - name: CLOUDDEFENSE_SENDGRID_EMAIL
          valueFrom:
            configMapKeyRef:
              key: CLOUDDEFENSE_SENDGRID_EMAIL
              name: scan-server-config
        - name: AWS_SCAN_S3_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AWS_SCAN_S3_ACCESS_KEY
              name: scan-server-secrets
              optional: true
        - name: AWS_SCAN_S3_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AWS_SCAN_S3_SECRET_KEY
              name: scan-server-secrets
              optional: true
        - name: AWS_DAST_UPLOAD_S3_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AWS_DAST_UPLOAD_S3_ACCESS_KEY
              name: scan-server-secrets
              optional: true
        - name: AWS_DAST_UPLOAD_S3_SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: AWS_DAST_UPLOAD_S3_SECRET_KEY
              name: scan-server-secrets
              optional: true
        - name: AWS_DAST_UPLOAD_S3_REGION
          valueFrom:
            configMapKeyRef:
              key: AWS_DAST_UPLOAD_S3_REGION
              name: scan-server-config
        - name: AWS_DAST_UPLOAD_S3_BUCKET
          valueFrom:
            configMapKeyRef:
              key: AWS_DAST_UPLOAD_S3_BUCKET
              name: scan-server-config
        - name: VULNERABILITY_SCRAPER_SERVICE_HOST
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: VULNERABILITY_SCRAPER_SERVICE_HOST
        - name: VULNERABILITY_SCRAPER_SERVICE_TOKEN
          valueFrom:
            secretKeyRef:
              name: vulnscrape-secrets
              key: VULNERABILITY_SCRAPER_SERVICE_TOKEN
        - name: NVD_KEY
          valueFrom:
            secretKeyRef:
              name: scan-server-secrets
              key: NVD_KEY
        - name: MICRONAUT_ENVIRONMENTS
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: MICRONAUT_ENVIRONMENTS
        - name: CLOUDDEFENSE_BASE_URL
          valueFrom:
            configMapKeyRef:
              name: cdefense-config
              key: CLOUDDEFENSE_BASE_URL
        - name: OUTSIDE
          valueFrom:
            configMapKeyRef:
                name: cdefense-config
                key: OUTSIDE
        - name: VFEED_SYNC_JOB_CRON_EXPRESSION
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: DATA_VFEED_SQLITE_FULL_REFRESH_CRON_EXPRESSION
        - name: SECRET_HEADER_VALUE
          valueFrom:
            secretKeyRef:
              key: ATTACK_PATH_KEY
              name: cdefense-secrets
        - name: ALERT_SERVICE_URL
          valueFrom:
            configMapKeyRef:
              name: scan-server-config
              key: ALERT_SERVICE_URL
        - name: ATTACK_PATH_KEY
          valueFrom:
            secretKeyRef:
              key: ATTACK_PATH_KEY
              name: cdefense-secrets
        ports:
        - containerPort: 8080
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 15
          failureThreshold: 10
          successThreshold: 1
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 35
          periodSeconds: 15
          failureThreshold: 10
          successThreshold: 1
      #  resources:
      #    requests:
      #      memory: "1G"
      #      cpu: "500m"
      #    limits:
      #      memory: "1G"
