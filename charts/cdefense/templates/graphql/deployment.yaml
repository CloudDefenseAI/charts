---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: graphql
  namespace: {{ .Release.Namespace | default "default"}}
spec:
  selector:
    matchLabels:
      app: graphql
  replicas: 1
  template:
    metadata:
      labels:
        app: graphql
      annotations:
        diun.enable: "true"
    spec:
      {{- if .Values.graphql.nodeSelector }}
      nodeSelector:
        label: {{ .Values.graphql.nodeSelector }}
      {{- end }}
      {{- if .Values.graphql.tolerations }}
      tolerations:
{{ toYaml .Values.graphql.tolerations | indent 8 }}
      {{- end }}
      imagePullSecrets:
      - name: regcred
      containers:
      - name: graphql
        image: {{ .Values.graphql.image }}:{{ .Values.version }}
        imagePullPolicy: Always
        env:
        - name: HASURA_GRAPHQL_DEV_MODE
          valueFrom:
            configMapKeyRef:
              name: graphql-config
              key: HASURA_GRAPHQL_DEV_MODE
        - name: HASURA_GRAPHQL_ENABLE_CONSOLE
          valueFrom:
            configMapKeyRef:
              name: graphql-config
              key: HASURA_GRAPHQL_ENABLE_CONSOLE
        - name: HASURA_GRAPHQL_ENABLE_TELEMETRY
          valueFrom:
            configMapKeyRef:
              name: graphql-config
              key: HASURA_GRAPHQL_ENABLE_TELEMETRY
        - name: HASURA_GRAPHQL_NO_OF_RETRIES
          valueFrom:
            configMapKeyRef:
              name: graphql-config
              key: HASURA_GRAPHQL_NO_OF_RETRIES
        - name: HASURA_GRAPHQL_UNAUTHORIZED_ROLE
          valueFrom:
            configMapKeyRef:
              name: graphql-config
              key: HASURA_GRAPHQL_UNAUTHORIZED_ROLE
        - name: HASURA_GRAPHQL_DATABASE_URL
          valueFrom:
            secretKeyRef:
              key: HASURA_GRAPHQL_DATABASE_URL
              name: graphql-secrets
        - name: HASURA_GRAPHQL_ADMIN_SECRET
          valueFrom:
            secretKeyRef:
              key: HASURA_GRAPHQL_ADMIN_SECRET 
              name: graphql-secrets
        - name: HASURA_GRAPHQL_JWT_SECRET
          valueFrom:
            secretKeyRef:
              key: HASURA_GRAPHQL_JWT_SECRET
              name: graphql-secrets
        ports:
        - containerPort: 8080
    #    resources:
    #      requests:
    #        memory: "0.5G"
    #        cpu: "250m"
    #      limits:
    #        memory: "1G"
    #        cpu: "500m"
      initContainers:
      - name: check-db
        image: postgres:14
        imagePullPolicy: IfNotPresent
        command: 
          - sh
          - -c
          - until pg_isready -h db -p 5432; do echo waiting for database; sleep 5; done;
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      - name: check-authservice-pod
        image: bitnami/kubectl:latest
        imagePullPolicy: IfNotPresent
        command:
          - /bin/sh
          - -c
          - while [ "$(kubectl get pod -l app='authservice' -o jsonpath='{.items[0].status.phase}')" != "Running" ]; do echo "Waiting for authservice to be ready."; sleep 10; done
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
    #   - name: check-authservice
    #     image: radial/busyboxplus:curl
    #     imagePullPolicy: IfNotPresent
    #     command:
    #     - sh
    #     - -c
    #     - until $(curl --connect-timeout 2 --output /dev/null --silent --fail http://authservice);  do
    #       echo waiting for authservice; sleep 10; done; echo connection to authservice ok
    #     resources: {}
    #     terminationMessagePath: /dev/termination-log
    #     terminationMessagePolicy: File
      - name: check-authservice # WARNING checks logs of the authservice pod for "SERVER RUNNING" as such likelier to break as result if developer change the authservice pod logs
        image: bitnami/kubectl:latest
        command:
          - sh
          - -c
          - POD=$(kubectl get pod -l app=authservice -o jsonpath="{.items[0].metadata.name}") && until kubectl logs $POD|grep "Server Running"; do echo "waiting for authservice"; sleep 10; done; echo connection to authservice ok 
        imagePullPolicy: IfNotPresent
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File